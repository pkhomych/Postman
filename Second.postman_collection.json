{
	"info": {
		"_postman_id": "f767bb12-6db6-4f67-a713-5750763fb549",
		"name": "Collection2_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21326100"
	},
	"item": [
		{
			"name": "First task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var Resp_text = pm.response.text();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check correct string in body\", function () {\r",
							"    pm.response.to.have.body(Resp_text);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Second task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var respData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Hardcode\", function () {\r",
							"    pm.expect(respData.name).to.eql(\"Pavel\");\r",
							"    pm.expect(respData.age).to.eql(\"20\");\r",
							"    pm.expect(respData.salary).to.eql(600);\r",
							"});\r",
							"\r",
							"var reqData = request.data;\r",
							"\r",
							"pm.test(\"Take date from requset\", function () {\r",
							"    pm.expect(reqData.name).to.eql(respData.name);\r",
							"    pm.expect(reqData.age).to.eql(respData.age);\r",
							"    pm.expect(+reqData.salary).to.eql(respData.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(respData.family.u_salary_1_5_year).to.eql(respData.salary *4);\r",
							"});\r",
							"\r",
							"console.log(\"My name is \",reqData.name);\r",
							"console.log(\"My age is \",reqData.age);\r",
							"console.log(\"My salary is \",reqData.salary);\r",
							"console.log(\"My family \",respData.family.children);\r",
							"console.log(\"Future salsry = \",respData.salary *4);\r",
							"\r",
							"console.log(\"reqdata \",reqData);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Third task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var Resp_body = pm.response.json();\r",
							"var dog_info = Resp_body.family.pets.dog\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var Req_params = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from request to eql response\", function () {\r",
							"    pm.expect(Req_params.name).to.eql(Resp_body.name)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age from request to eql response\", function () {\r",
							"    pm.expect(Req_params.age).to.eql(Resp_body.age)\r",
							"})\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary from request to eql response\", function () {\r",
							"    pm.expect(+Req_params.salary).to.eql(Resp_body.salary)\r",
							"})\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Resp_body.family\", Resp_body.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Name dog\", function () {\r",
							"    pm.expect(Resp_body.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Age dog\", function () {\r",
							"    pm.expect(Resp_body.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog's name\", function () {\r",
							"    pm.expect(dog_info.name).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog's name\", function () {\r",
							"    pm.expect(dog_info.age).to.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Pavel&age=20&salary=600",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fourth task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var Resp_body = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var Req_params = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name from request to eql response\", function () {\r",
							"    pm.expect(Req_params.name).to.eql(Resp_body.name)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check name from request to eql response\", function () {\r",
							"    pm.expect(+Req_params.age).to.eql(Resp_body.age)\r",
							"})\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Req_salary = \", Req_params.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Resp_salary = \", Resp_body.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Resp_salary = \", Resp_body.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметр salary из response.\r",
							"console.log(\"Resp_salary = \", Resp_body.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметр salary из response.\r",
							"console.log(\"Resp_salary = \", Resp_body.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check first element salary from response to eql request\", function () {\r",
							"    pm.expect(Resp_body.salary[0]).to.eql(+Req_params.salary)\r",
							"})\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check first element salary from response to eql request\", function () {\r",
							"    pm.expect(+Resp_body.salary[1]).to.eql(Req_params.salary*2)\r",
							"})\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check first element salary from response to eql request\", function () {\r",
							"    pm.expect(+Resp_body.salary[2]).to.eql(Req_params.salary*3)\r",
							"})\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.collectionVariables.set(\"name\", \"\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.collectionVariables.set(\"age\", \"\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.collectionVariables.set(\"salary\", \"\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", Resp_body.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", Resp_body.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", Resp_body.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"// Первый способ\r",
							"for (var i of Resp_body.salary){\r",
							"    console.log(i)\r",
							"}\r",
							"\r",
							"//Второй способ \r",
							"for (i=0; i<Resp_body.salary.length; i++){\r",
							"    console.log(Resp_body.salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Pavel&age=20&salary=600",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "600"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fifth task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"var Salary = pm.environment.get(\"salary\");\r",
							"\r",
							"// 2. Вставить параметр age из окружения в request\r",
							"var Age = pm.environment.get(\"age\");\r",
							"\r",
							"// 3. Вставить параметр name из окружения в request\r",
							"var Name = pm.environment.get(\"name\");\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var Resp_body = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var Req_body = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check start_qa_salary in json response\", function() {\r",
							"    pm.expect(Resp_body).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months in json response\", function() {\r",
							"    pm.expect(Resp_body).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check qa_salary_after_12_months in json response\", function() {\r",
							"    pm.expect(Resp_body).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check qa_salary_after_1.5_year in json response\", function() {\r",
							"    pm.expect(Resp_body).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check qa_salary_after_3.5_years in json response\", function() {\r",
							"    pm.expect(Resp_body).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check qa_salary_after_3.5_years in json response\", function() {\r",
							"    pm.expect(Resp_body).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary to eql salary from request\", function(){\r",
							"    pm.expect(Resp_body.start_qa_salary).to.eql(+Req_body.salary)\r",
							"})\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months to eql salary*2 from request\", function(){\r",
							"    pm.expect(Resp_body.qa_salary_after_6_months).to.eql(+Req_body.salary*2)\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months to eql salary*2.7 from request\", function(){\r",
							"    pm.expect(Resp_body.qa_salary_after_12_months).to.eql(+Req_body.salary*2.7)\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// Так как в 1.5 есть точка, то чтобы вытащить данные нужно использовать \r",
							"// конструкцию (Resp_body[\"qa_salary_after_1.5_year\"])\r",
							"pm.test(\"Check qa_salary_after_1.5_year to eql salary*3.3 from request\", function(){\r",
							"    pm.expect(Resp_body[\"qa_salary_after_1.5_year\"]).to.eql(+Req_body.salary*3.3)\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years to eql salary*3.8 from request\", function(){\r",
							"    pm.expect(Resp_body[\"qa_salary_after_3.5_years\"]).to.eql(+Req_body.salary*3.8)\r",
							"})\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check first element from person.u_name to eql salary from request\", function(){\r",
							"    pm.expect(Resp_body.person.u_name[1]).to.eql(+Req_body.salary)\r",
							"})\r",
							"\r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check person.u_age from response to eql age from request\", function(){\r",
							"    pm.expect(Resp_body.person.u_age).to.eql(+Req_body.age)\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check person.u_salary_5_years to eql salary*4.2 from request\", function(){\r",
							"    pm.expect(Resp_body.person.u_salary_5_years).to.eql(+Req_body.salary*4.2)\r",
							"})\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"// Для вывода ключей (keys)\r",
							"for (var k of Object.keys(Resp_body.person)){\r",
							"    \r",
							"    console.log(k)\r",
							"    \r",
							"}\r",
							"\r",
							"// Для вывода значений (values)\r",
							"for (var v of Object.values(Resp_body.person)){\r",
							"    \r",
							"    if (typeof(v) == 'object'){\r",
							"        \r",
							"        for (var vv of Object.values(v)){\r",
							"            console.log(vv)\r",
							"        }\r",
							"        \r",
							"        continue    \r",
							"    }\r",
							"\r",
							"    console.log(v)\r",
							"    \r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "600",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "salary",
			"value": ""
		}
	]
}