{
	"info": {
		"_postman_id": "2d183b84-4dfb-4b8c-8849-14d37f664b72",
		"name": "Collection3_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21326100"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Приходящий токен необходимо передать во все остальные запросы.\r",
							"\r",
							"// Парсим токен из ответа JSON в переменную\r",
							"var Resp_token = pm.response.json().token;\r",
							"\r",
							"console.log(Resp_token)\r",
							"\r",
							"// Закидываем токен из JSON ответа в переменну окружения\r",
							"pm.environment.set(\"Token\", Resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "password",
							"value": "wevwberebetrn",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"JSON schema validation\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var resp_body = pm.response.json();\r",
							"var req_body = JSON.parse(pm.request.body.raw)\r",
							"\r",
							"pm.test(\"Check qa_salary_after_6_months from response to eql salary*2 from request\", function(){\r",
							"    pm.expect(req_body.salary*2).to.eql(resp_body.qa_salary_after_6_months)\r",
							"})\r",
							"\r",
							"pm.test(\"Check qa_salary_after_12_months from response to eql salary*2.9 from request\", function(){\r",
							"    pm.expect(req_body.salary*2.9).to.eql(resp_body.qa_salary_after_12_months)\r",
							"})\r",
							"\r",
							"pm.test(\"Check u_salary_1.5_year from response to eql salary*4 from request\", function(){\r",
							"    pm.expect(req_body.salary*4).to.eql(resp_body.person.u_salary_1_5_year)\r",
							"})\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"pm.environment.set(\"Salary\", resp_body.person.u_salary_1_5_year);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\":20,\r\n    \"salary\":500,\r\n    \"name\":\"Pavel\",\r\n    \"auth_token\":\"{{Token}}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Validation schema\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var Resp_body = pm.response.json();\r",
							"\r",
							"pm.test(\"Check first element of salary\", function() {\r",
							"    pm.expect(+Resp_body.salary[1]).to.eql(Resp_body.salary[0]*2)\r",
							"})\r",
							"\r",
							"pm.test(\"Check second element of salary\", function() {\r",
							"    pm.expect(+Resp_body.salary[2]).to.eql(Resp_body.salary[0]*3)\r",
							"})\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Second element in array 'salary' is more than zero\", function() {\r",
							"  pm.expect(+Resp_body.salary[2]).to.above(Resp_body.salary[0])\r",
							"});\r",
							"\r",
							"pm.test(\"First element in array 'salary' is less than second\", function(){\r",
							"    pm.expect(+Resp_body.salary[1]).to.lessThan(+Resp_body.salary[2])\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{Token}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"validation JSON schema\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var Resp_body = pm.response.json();\r",
							"var Req_body = request.data\r",
							"\r",
							"pm.test(\"Check daily food\", function() {\r",
							"    pm.expect(Resp_body.daily_food).to.eql(Req_body.weight*0.012)\r",
							"})\r",
							"\r",
							"pm.test(\"Check daily_sleep\", function() {\r",
							"    pm.expect(Resp_body.daily_sleep).to.eql(Req_body.weight*2.5)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "71",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{Token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Validate JSON schema\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"// 3) Проверить что значение поля name = значению переменной name из окружения\r",
							"var Resp_body = pm.response.json();\r",
							"var name_var = pm.variables.get(\"name\");\r",
							"\r",
							"pm.test(\"Check name value from response to eql name in environment variable\", function() {\r",
							"    pm.expect(Resp_body.name).to.eql(name_var)\r",
							"})\r",
							"\r",
							"// 4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var Req_body = request.data\r",
							"\r",
							"pm.test(\"Checking age value from response to eql age in request\", function() {\r",
							"    pm.expect(Resp_body.age).to.eql(Req_body.age)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "20",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{Token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp = pm.response.json();\r",
							"\r",
							"// С помощью js random беру любой объект из присланного списка.\r",
							"var random_obj = Math.floor(Math.random() * (resp.length-1));\r",
							"console.log(random_obj)\r",
							"// В забранном рандомно объекте забираю значение Cur_ID и передаю через окружение в следующий запрос. \r",
							"pm.environment.set('Cur_ID', random_obj)\r",
							"\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"for (i of resp) {\r",
							"    pm.sendRequest({\r",
							"        url: \"http://54.157.99.22:80/curr_byn\",\r",
							"        method: \"POST\",\r",
							"        body: {\r",
							"            mode: \"formdata\",\r",
							"            formdata: [\r",
							"                {key: \"auth_token\", value: pm.environment.get(\"token\")},\r",
							"                {key: \"curr_code\", value: i.Cur_ID}\r",
							"            ]\r",
							"        }\r",
							"    }), (err, res) => {\r",
							"        currency(res.json(), res.code);\r",
							"    }\r",
							"}\r",
							"\r",
							"function currency(curr, code) {\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"    if (code === 500) {\r",
							"        return\r",
							"    } \r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"    else if (code === 200) {\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"        if (curr. hasOwnProperty( \"Cur_OfficialRate\")) {\r",
							"                console.log(\"Cur_Abbreviation:\", curr.Cur_Abbreviation),\r",
							"                console.log(\"Cur_ID:\", curr.Cur_ID),\r",
							"                console.log(\"Cur_Name:\", curr.Cur_Name),\r",
							"                console.log(\"Cur_OfficialRate:\", curr.Cur_OfficialRate),\r",
							"                console.log(\"Cur_Scale:\", curr.Cur_Scale),\r",
							"                console.log(\"Date:\", curr.Date)\r",
							"        }\r",
							"        else{\r",
							"// 7) переходим к следующей итерации\r",
							"            return;\r",
							"        };\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{Token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"status code is 200\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = { \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"JSON schema validation\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{Token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "Token",
			"value": ""
		}
	]
}